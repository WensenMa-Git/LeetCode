First, Let’s start with very basic and standalone application.
Then we can discuss how to scale up, how to reduce the latency, how to improve the performance, availability, and reliability later.

Requirements and goals of the system:
- Functional Requirements: (Design faciade rest api based on this)
    * Given a URL, our service should generate a shorter and unique alias of it.
    * When users access a short link, our service should redirect them to the original link.
    * （Users should optionally be able to pick a custom short link for their URL.）
    * Links will expire after a standard default timespan. Users should be able to specify the expiration time.

- Non-functional Requirements:
    * The system should be highly available. This is required because, if our service is down, all the URL redirections will start failing.
    * URL redirection should happen in real-time with minimal latency.
    * Shortened links should not be guessable (not predictable).

Some design consideration and assumption:==========
- Cache could be used to reduce the latency.
- We could have a cluster of servers with load balancer to improve the performance.
- We should segregate our read traffic from write traffic.
- Since we anticipate storing billions of rows, and we don’t need to use relationships between objects.
    * So, a NoSQL store like DynamoDB, Cassandra or Riak is a better choice.
- Traffic estimates:
    * Assuming, we will have 500M new URL shortenings per month, with 100:1 read/write ratio, we can expect 50B redirections during the same period:
    * What would be Queries Per Second (QPS) for our system? New URLs shortenings per second: 500 million / (30 days * 24 hours * 3600 seconds) = ~200 URLs/s

==========================================================================================
High Level Design:Component design: ******
client (rest call) -> load balancer - > servers -> SQL database
                                                -> Caches
                                                -> Encoding Servers.
:: split read and write traffic
[browser -> server -> get original url using tiny url and redirect the page. ]

- To improve the reliability / fault tolerance, we can add monitor system to the server. retry mechanism
- To improve the processing ability, we can add more servers / add more db servers/partition DB

*******************************************************************************************
Rest API design:
- POST https://api.endpoint.com/url/tiny-url HTTP/1.1
- Content-Type: application/form-data.; charset=utf-8
- Content-Length: 100
- Parameters:
  {
    "OriginalURL":"https://www.yelp.ca/collection/P8_3kSKec5SAM8gajO58Fw",
    "ExpirationDate":"2022-10-01"
    "UserID":"123"
  }
- Accept: application/json
        #: HTTP/1.1 200 OK
           {
               "status": 200,
               "shortened-url": "http://tinyurl.com/jlg8zpc"
           }
        #: HTTP/1.1 400 Bad request
            {
                "status": 400,
                "name": "Bad request",
                "message": "Invalid parameter in request body: Syntax error."
            }
-----------------------------------------------------------------------------------------------
- GET https://api.endpoint.com/url/orignial-url HTTP/1.1
- Content-Type: application/form-data.; charset=utf-8
- Content-Length: 100
- Parameters:
  {
    "TinyURL":"http://tinyurl.com/jlg8zpc",
  }
- Accept: application/json
        #: HTTP/1.1 200 OK
           {
               "status": 200,
               "original-url": "https://www.yelp.ca/collection/P8_3kSKec5SAM8gajO58Fw"
           }
        #: HTTP/1.1 400 Bad request
            {
                "status": 400,
                "name": "Bad request",
                "message": "Invalid parameter in request body: Syntax error."
            }
-----------------------------------------------------------------------------------------------
- DELETE https://api.endpoint.com/url/tiny-url HTTP/1.1
- Content-Type: application/form-data.; charset=utf-8
- Content-Length: 100
- Parameters:
  {
    "TinyURL":"http://tinyurl.com/jlg8zpc",
  }
- Accept: application/json
        #: HTTP/1.1 200 OK
           {
               "status": 200
           }
        #: HTTP/1.1 400 Bad request
            {
                "status": 400,
                "name": "Bad request",
                "message": "Invalid parameter in request body: Syntax error."
            }
*******************************************************************************************
Database Design:
A few observations about the nature of the data we will store:
- We need to store billions of records.
- Each object we store is small (less than 1K).
- There are no relationships between records—other than storing which user created a URL.
- Our service is read-heavy.
URL((URLID:int), [UserID:int], TinyURL:varchar(16), OriginalURL:varchar(512), CreationDate:datetime, ExpirationDate:datetime)
User((UserID:int), Name:varchar(20), Email:varchar(32), CreationDate:datetime, LastLogin:datetime)
- Since we anticipate storing billions of rows, and we don’t need to use relationships between objects –
    * a NoSQL store like DynamoDB, Cassandra or Riak is a better choice.

*******************************************************************************************
Encoding actual URL:
- We can compute a unique hash (e.g., MD5 or SHA256, etc.) of the given URL. The hash can then be encoded for display.
    *This encoding could be base36 ([a-z ,0-9]) or base62 ([A-Z, a-z, 0-9]) and if we add ‘+’ and ‘/’ we can use Base64 encoding.
- Using base64 encoding, a 6 letters long key would result in 64^6 = ~68.7 billion possible strings.
- Using base64 encoding, an 8 letters long key would result in 64^8 = ~281 trillion possible strings.

*******************************************************************************************
Cache:
- We can cache URLs that are frequently accessed.
- We can use some solution like Memcached or Hazelcast, which can store full URLs with their respective hashes.
- Before hitting backend storage, the application servers can quickly check if the cache has the desired URL.
* Cache replacement policies: LRU (Least recently used), LFU (Least Frequently used).

*******************************************************************************************
Load balancing layer:
We can add a Load balancing layer at three places in our system:

Between Clients and Application servers
Between Application Servers and database servers
Between Application Servers and Cache servers
Initially, we could use a simple Round Robin approach that distributes incoming requests equally among backend servers.
    * This LB is simple to implement and does not introduce any overhead.
    * Another benefit of this approach is that if a server is dead, LB will take it out of the rotation and will stop sending any traffic to it.

A problem with Round Robin LB is that we don’t take the server load into consideration.
    * If a server is overloaded or slow, the LB will not stop sending new requests to that server.
    * To handle this, a more intelligent LB solution can be placed that periodically queries the backend server about its load and adjusts traffic based on that.




