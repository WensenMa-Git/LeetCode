https://www.educative.io/courses/grokking-the-system-design-interview/m2G48X18NDO

Requirements and goals of the system:
- Functional Requirements:
    * Users should be able to post new tweets. ##
    * A user should be able to follow other users. ##
    * Users should be able to mark tweets as favorites.
    * The service should be able to create and display news feeds. ##
    * Tweets can contain photos and videos.
- Non-functional Requirements:
    * Our service needs to be highly available.
    * Acceptable latency of the system is 200ms for timeline generation.
- Extended Requirements:
    * Searching for tweets.
    * Replaying for a tweet.
    * Tweet notification.
    * Who to follow? Suggestions?

Some design consideration and assumption:==========
- Let’s assume we have one billion total users with 200 million daily active users (DAU).
https://www.educative.io/courses/grokking-the-system-design-interview/gxpWJ3ZKYwl



==========================================================================================
High Level Design:Component design: ******
                                                                                    -> Database (Metadata DB, Posts, Video and post storage)
UserA ---(Add/Update post)--> web server -> Load Balancer ----> Application Servers -> Cache Server (Metadata, Media, Posts)
                                                            |
UserB <--(Feed Update)-------web server --->Load Balancer ---->  Caches servers holding feed.


*******************************************************************************************
Rest API design:
- tweet(api_dev_key, tweet_data, tweet_location, user_id);
    * POST http://api.endpoint.com/tweet HTTP/1.1
    * Content-Type: application/form-data.; charset=utf-8
    * Content-Length: 57
    * Parameters: {"UserId":1, "Content":"Hello World", "Location":"London", "Device":"iPhone"}
- update(tweet_id);
    * PUT http://api.endpoint.com/tweet/{tweet-id} HTTP/1.1
- delete(tweet_id);
    * DELETE http://api.endpoint.com/tweet/{tweet-id} HTTP/1.1
- get_feeds(user_id);
    * GET https://api.endpoint.com/feeds/{user-id} HTTP/1.1
    * Accept: application/json
        #: HTTP/1.1 200 OK
           {
               "status": 200,
               "message": "Done",
               "message_code": 1,
               "action": "verify;enroll",
               "enrollment": 1,
               "result": 1,
               "high_confidence": 1,
           }
        #: HTTP/1.1 400 Bad request

            {
                "name": "Bad request",
                "message": "Invalid parameter in request body: Syntax error.",
                "message_code": 31,
                "status": 400
            }
*******************************************************************************************
Cache:
- We can introduce a cache for database servers to cache hot tweets and users.
- We can cache the users feed.

*******************************************************************************************
Database schema:
- Tweet((TweetID:int), UserID:int, Content:varchar(140), CreationDate: datetime, Location:varchar, Device:varchar);
- User((UserID:int), Name:varchar(20), Email:varchar(32), DataOfBirth:datetime, CreationDate:datetime, LastLogin:datetime);
- UserFollow((UserID1:int, UserID2:int))
- Favorite((TweetID:int, UserID:int), CreationDate:datetime)
-# A straightforward approach for storing the above schema would be to use an RDBMS like MySQL since we require joins.
    * SQL vs NoSQL: https://www.educative.io/courses/grokking-the-system-design-interview/YQlK1mDPgpK
    * SQL: ensure ACID, data is structured and unchanging, join search;
    * NoSQL: Data has no structure, easy for scale, Insertions and retrievers require the whole block
-# We can store photos in a distributed file storage like HDFS or S3.
-# We can store the above schema in a distributed key-value store to enjoy the benefits offered by NoSQL. All the metadata related to photos can go to a table where the ‘key’ would be the ‘PhotoID’ and the ‘value’ would be an object containing PhotoLocation, UserLocation, CreationTimestamp, etc.

*******************************************************************************************
Data Sharding:
- Since we have a huge number of new tweets every day and our read load is extremely high too, we need to distribute our data onto multiple machines such that we can read/write it efficiently.

Data reliability and redundancy:
- Losing files is not an option for our service. Therefore, we will store multiple copies of each file so that if one storage server dies, we can retrieve the photo from the other copy present on a different storage server.




