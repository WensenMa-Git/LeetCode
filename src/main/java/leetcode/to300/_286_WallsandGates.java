package leetcode.to300;

import java.util.LinkedList;
import java.util.Queue;

/**
 * https://leetcode.com/problems/walls-and-gates/
 * Subject: DFS
 * #Medium
 */
public class _286_WallsandGates {


    // space : O(n)
    public void wallsAndGates(int[][] rooms) {
        for (int i = 0; i < rooms.length; i++) {
            for (int j = 0; j < rooms[0].length; j++) {
                if (rooms[i][j] == 0) {
                    dfs(rooms, i, j, 0);
                }
            }
        }
    }

    private void dfs(int[][] rooms, int i, int j, int dis) {
        if (i < 0 || i >= rooms.length || j < 0 || j >= rooms[0].length || rooms[i][j] == -1) return;
        if(rooms[i][j] == 0 && dis != 0 || rooms[i][j] != 0 && rooms[i][j] <= dis) return;
        rooms[i][j] = dis;
        dfs(rooms, i - 1, j, dis + 1);
        dfs(rooms, i + 1, j, dis + 1);
        dfs(rooms, i, j + 1, dis + 1);
        dfs(rooms, i, j - 1, dis + 1);
    }

    public void wallsAndGates2(int[][] rooms) {
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < rooms.length; i++) {
            for (int j = 0; j < rooms[0].length; j++) {
                if (rooms[i][j] == 0) {
                    queue.add(new int[]{i, j});
                }
            }
        }
        while (!queue.isEmpty()) {
            int[] top = queue.remove();
            int row = top[0], col = top[1];
            if (row > 0 && rooms[row - 1][col] == Integer.MAX_VALUE) {
                rooms[row - 1][col] = rooms[row][col] + 1;
                queue.add(new int[]{row - 1, col});
            }
            if (row < rooms.length - 1 && rooms[row + 1][col] == Integer.MAX_VALUE) {
                rooms[row + 1][col] = rooms[row][col] + 1;
                queue.add(new int[]{row + 1, col});
            }
            if (col > 0 && rooms[row][col - 1] == Integer.MAX_VALUE) {
                rooms[row][col - 1] = rooms[row][col] + 1;
                queue.add(new int[]{row, col - 1});
            }
            if (col < rooms[0].length - 1 && rooms[row][col + 1] == Integer.MAX_VALUE) {
                rooms[row][col + 1] = rooms[row][col] + 1;
                queue.add(new int[]{row, col + 1});
            }
        }
    }

    public static void main(String[] args) {
        int[][] rooms0 = new int[][]{
                {0,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
                {999,0,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
                {999,999,0,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
                {999,999,999,0,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
                {999,999,999,999,0,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
                {999,999,999,999,999,0,999,999,999,999,999,999,999,999,999,999,999,999,999,999},
                {999,999,999,999,999,999,0,999,999,999,999,999,999,999,999,999,999,999,999,999},
                {999,999,999,999,999,999,999,0,999,999,999,999,999,999,999,999,999,999,999,999},
                {999,999,999,999,999,999,999,999,0,999,999,999,999,999,999,999,999,999,999,999},
                {999,999,999,999,999,999,999,999,999,0,999,999,999,999,999,999,999,999,999,999},
                {999,999,999,999,999,999,999,999,999,999,0,999,999,999,999,999,999,999,999,999},
                {999,999,999,999,999,999,999,999,999,999,999,0,999,999,999,999,999,999,999,999},
                {999,999,999,999,999,999,999,999,999,999,999,999,0,999,999,999,999,999,999,999},
                {999,999,999,999,999,999,999,999,999,999,999,999,999,0,999,999,999,999,999,999},
                {999,999,999,999,999,999,999,999,999,999,999,999,999,999,0,999,999,999,999,999},
                {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,0,999,999,999,999},
                {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,0,999,999,999},
                {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,0,999,999},
                {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,0,999},
                {999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,0}};

        int[][] rooms1 = new int[][]{
                {0,999,999,999,999,999,999,999,999,999,999},
                {999,0,999,999,999,999,999,999,999,999,999},
                {999,999,0,999,999,999,999,999,999,999,999},
                {999,999,999,0,999,999,999,999,999,999,999},
                {999,999,999,999,0,999,999,999,999,999,999},
                {999,999,999,999,999,0,999,999,999,999,999},
                {999,999,999,999,999,999,0,999,999,999,999},
                {999,999,999,999,999,999,999,0,999,999,999},
                {999,999,999,999,999,999,999,999,0,999,999},
                {999,999,999,999,999,999,999,999,999,0,999},
                {999,999,999,999,999,999,999,999,999,999,0},
                };
        int[][] rooms = new int[][]{
                {0,999,999,999,999,999},
                {999,0,999,999,999,999},
                {999,999,0,999,999,999},
                {999,999,999,0,999,999},
                {999,999,999,999,0,999},
                {999,999,999,999,999,0},
        };
        new _286_WallsandGates().wallsAndGates(rooms0);

    }





}
